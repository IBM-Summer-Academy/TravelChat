using Microsoft.AspNetCore.Mvc;
using TravelChat.Server.Models;
using TravelChat.Server.Responses;

namespace TravelChat.Server.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class ChatController : Controller
    {
        public ChatController(ILogger<ChatController> logger, ChatService chatService)
        {
            _logger = logger;
            _chatService = chatService;
        }

        /// <summary>
        /// Creates a new chat session
        /// </summary>
        /// <returns>The id to new session</returns>
        /// <response code="201">Returns the newly created session id</response>
        /// <response code="500">Returns a message saying what went wrong</response>
        [HttpPost(nameof(CreateSession))]
        [ProducesResponseType(StatusCodes.Status201Created, Type = typeof(SessionResponse))]
        [ProducesResponseType(StatusCodes.Status500InternalServerError, Type = typeof(ErrorResponse))]
        public IActionResult CreateSession() 
        {
            try
            {
                var sessionId = _chatService.CreateSession();
                return StatusCode(StatusCodes.Status201Created, new SessionResponse { SessionId = sessionId });
            }
            catch (Exception)
            {
                return StatusCode(StatusCodes.Status500InternalServerError, new ErrorResponse { Message = "Couldn't create a chat session" });
            }
        }


        /// <summary>
        /// Sends a message to the assistant api
        /// </summary>
        /// <param name="message"></param>
        /// <returns>The assistant's response</returns>
        /// <response code="200">Returns the assistant's response text</response>
        /// <response code="403">Is returned when the session expired</response>
        /// <response code="404">Is returned when there wasn't any response generated by the assistant</response>
        [HttpPost(nameof(SendMessage))]
        [ProducesResponseType(StatusCodes.Status200OK, Type = typeof(ChatResponse))]
        [ProducesResponseType(StatusCodes.Status403Forbidden, Type = typeof(ErrorResponse))]
        [ProducesResponseType(StatusCodes.Status404NotFound, Type = typeof(ErrorResponse))]
        public IActionResult SendMessage([FromBody]ChatMessage message)
        {
            try
            {
                var response = _chatService.Message(message);
                _logger.LogInformation(response);
                return Json(new ChatResponse { Content = response });
            }
            catch (InvalidOperationException)
            {
                return NotFound(new ErrorResponse { Message = "Couldn't find a proper response" });
            }
            catch (AggregateException)
            {
                return StatusCode(StatusCodes.Status403Forbidden, new ErrorResponse { Message = "The chat session has expired" });
            }
        }

        [HttpPost(nameof(RateResult))]
        public IActionResult RateResult([FromQuery] byte rating)
        {
            return Ok();
        }

        private readonly ILogger<ChatController> _logger;
        private readonly ChatService _chatService;
    }
}