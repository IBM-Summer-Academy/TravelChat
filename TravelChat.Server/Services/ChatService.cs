using IBM.Cloud.SDK.Core.Authentication.Iam;
using IBM.Cloud.SDK.Core.Http;
using IBM.Watson.Assistant.v2;
using IBM.Watson.Assistant.v2.Model;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Options;
using TravelChat.Server.Models;

namespace TravelChat.Server.Controllers
{
    public class ChatService : IDisposable
    {
        public ChatService(IOptions<WatsonCredentials> watsonCredentials) 
        {
            _watsonCredentials = watsonCredentials.Value;
            _authenticator = new IamAuthenticator(apikey: _watsonCredentials.Key);
            _assistantService = new AssistantService("2024-07-05", _authenticator);
            _assistantService.SetServiceUrl(_watsonCredentials.Url);
            _sessionResponse = _assistantService.CreateSession(assistantId: _watsonCredentials.AssistantId);
        }

        // throws invalid operation exception if there was no response generated by the assistant
        public string Message(string content)
        {
            var response = _assistantService.Message(
                _watsonCredentials.AssistantId,
                _sessionResponse.Result.SessionId,
                input: new MessageInput()
                {
                    MessageType = MessageInput.MessageTypeEnumValue.TEXT,
                    Text = content
                });

            RuntimeResponseGeneric genericResponse = response.Result.Output.Generic.First();
            return genericResponse.Text;
        }

        public void Dispose()
        {
            if (_isDisposed)
                return;

            _isDisposed = true;
            _assistantService.DeleteSession(_watsonCredentials.AssistantId, _sessionResponse.Result.SessionId);
        }

        private readonly WatsonCredentials _watsonCredentials;
        private readonly IamAuthenticator _authenticator;
        private readonly AssistantService _assistantService;
        private DetailedResponse<SessionResponse> _sessionResponse;
        private bool _isDisposed = false;
    }
}
