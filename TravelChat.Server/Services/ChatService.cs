using IBM.Cloud.SDK.Core.Authentication.Iam;
using IBM.Cloud.SDK.Core.Http;
using IBM.Watson.Assistant.v2;
using IBM.Watson.Assistant.v2.Model;
using Microsoft.AspNetCore.DataProtection.KeyManagement;
using Microsoft.Extensions.Options;
using System.Text;
using System.Text.Json;
using TravelChat.Server.Models;

namespace TravelChat.Server.Controllers
{
    public class ChatService
    {
        public ChatService(IOptions<WatsonCredentials> watsonCredentials, IOptions<WeatherCredentials> weatherCredentials, ILogger<ChatService> logger)
        {
            _watsonCredentials = watsonCredentials.Value;
            _weatherCredentials = weatherCredentials.Value;
            _logger = logger;
            _authenticator = new IamAuthenticator(apikey: _watsonCredentials.Key);
            _assistantService = new AssistantService("2024-07-09", _authenticator);
            _assistantService.SetServiceUrl(_watsonCredentials.Url);
        }

        public string CreateSession()
        {
            var sessionresponse = _assistantService.CreateSession(_watsonCredentials.AssistantId);
            return sessionresponse.Result.SessionId;
        }

        /* Bad responses:
            {
                Input: recommend my some vacation destinations please, but i don't want to be near the sea
                Output: Croatia: Croatia's Dalmatian Coast boasts crystal-clear waters, historic cities like Dubrovnik, and stunning islands like Hvar.
                Intent: European_sea
                Confidence: 0.8798264861106873
            }
            
         */

        // throws invalid operation exception if there was no response generated by the assistant
        public string Message(ChatMessage message)
        {
            var response = _assistantService.Message(
                _watsonCredentials.AssistantId,
                message.SessionId,
                input: new MessageInput()
                {
                    MessageType = MessageInput.MessageTypeEnumValue.TEXT,
                    Text = message.Content
                });

            _logger.LogInformation(response.Response);
            RuntimeResponseGeneric genericResponse = response.Result.Output.Generic.First();
            if (CheckEnd(genericResponse.Text))
            {
                return AddWeatherData(sharedClient, genericResponse.Text).Result;
            }
            return genericResponse.Text;
        }
        private bool CheckEnd(string message)
        {
            if (message.Substring(message.Length - 3) == "END") return true;
            return false;
        }

        private readonly HttpClient sharedClient = new()
        {
            BaseAddress = new Uri("http://api.weatherapi.com/v1/"),
        };

        async Task<string> GetTemp(HttpClient httpClient, string location)
        {
            using HttpResponseMessage response = await httpClient.GetAsync($"current.json?key={_weatherCredentials.Key}&q={location}&aqi=no");

            response.EnsureSuccessStatusCode();

            var jsonResponse = await response.Content.ReadAsStringAsync();

            using JsonDocument doc = JsonDocument.Parse(jsonResponse);
            JsonElement root = doc.RootElement;

            // Access the specific parts of the JSON
            double temperature = root.GetProperty("current").GetProperty("temp_c").GetDouble();
            string condition = root.GetProperty("current").GetProperty("condition").GetProperty("text").GetString();

            return $"({temperature}°C, {condition})";
        }

        async Task<string> AddWeatherData(HttpClient client, string text)
        {
            StringBuilder builder = new StringBuilder();

            string[] lines = text.Split("\n",StringSplitOptions.RemoveEmptyEntries);

            string line = lines[0];
            string[] citites = line.Split(", ");

            string[] weatherData = new string[citites.Length];

            for (int i = 0; i < citites.Length; i++)
            {
                weatherData[i] = await GetTemp(client, citites[i]);
            }

            for (int i = 1; i < 6; i++)
            {
                if (i > 1) builder.Append("\n");

                string currLine = lines[i];
                currLine = currLine.Replace(citites[i - 1], citites[i - 1] + " " + weatherData[i - 1]);

                builder.Append(currLine);
            }

            return builder.ToString();
        }

        private readonly WatsonCredentials _watsonCredentials;
        private readonly WeatherCredentials _weatherCredentials;
        private readonly IamAuthenticator _authenticator;
        private readonly AssistantService _assistantService;
        private readonly ILogger<ChatService> _logger;
    }
}